@import "library.cocoascript";

var fillInRect = function(container, rect, color) {
  if (! color) {
    color = [MSColor colorWithRed:1.0 green:0.0 blue:0.0 alpha:0.6];
  }
  var containerRect = NSZeroRect;
  containerRect.origin = container.convertPointToLayerCoordinates(rect.origin);
  containerRect.size = rect.size;
  var line = SketchLib.addShapeLayer(container, {"rect": containerRect, "color": color});
  var style = line.style();
  style.fill().enabled = true;
  var border = style.border();
  if (border) {border.enabled = false;}
  return line;
}

var getLineFragments = function(textLayer) {
  var storage = textLayer.createTextStorage();
  var layout = storage.layoutManagers().firstObject();
  var actualCharacterRangePtr = MOPointer.new();
  var charRange = NSMakeRange(0, storage.length());
  var origin = textLayer.rect().origin;

  [layout glyphRangeForCharacterRange:charRange actualCharacterRange:actualCharacterRangePtr];
  var glyphRange = actualCharacterRangePtr.value();

  var fragments = NSMutableArray.new();
  var currentLocation = 0;
  while (currentLocation < NSMaxRange(glyphRange)) {
    var effectiveRangePtr = MOPointer.new();
    var rect = [layout lineFragmentRectForGlyphAtIndex:currentLocation effectiveRange:effectiveRangePtr];
    rect = textLayer.convertRectToAbsoluteCoordinates(rect);
    var effectiveRange = effectiveRangePtr.value();
    var baselineOffset = [[layout typesetter] baselineOffsetInLayoutManager:layout glyphIndex:currentLocation];
    fragments.addObject({"rect": rect, "baselineOffset": baselineOffset, range: effectiveRange});
    currentLocation = NSMaxRange(effectiveRange)+1;
  }

  return fragments;
}

var addBaselines = function(container, fragments) {

  var group = SketchLib.addLayerGroup(container, {"name": "Baselines" });
  MSLayerMovement.moveToBack([group]);

  var fragmentCount = fragments.count();
  for (var i=0; i<fragmentCount; i++) {
    var fragment = fragments[i];
    var rect = fragment.rect;
    var baselineOffset = fragment.baselineOffset;

    var baselineRect = NSMakeRect(
      NSMinX(rect),
      NSMaxY(rect)-baselineOffset,
      NSWidth(rect),
      0.5
    );

    fillInRect(group, baselineRect);
  }

  [group resizeToFitChildrenWithOption:0];
}

var addLineFragments = function(container, fragments) {
  var group = SketchLib.addLayerGroup(container, {"name": "Line Fragments" });
  MSLayerMovement.moveToBack([group]);

  var fragmentCount = fragments.count();
  for (var i=0; i<fragmentCount; i++) {
    var fragment = fragments[i];
    var rect = fragment.rect;
    var alpha = ( i & 1 ) ? 0.1 : 0.25;
    var color = [MSColor colorWithRed:0.0 green:1.0 blue:0.0 alpha:alpha];
    fillInRect(group, rect, color);
  }

  [group resizeToFitChildrenWithOption:0];
}

var onAddLineFragments = function(context) {
  var doc = context.document;
  var plugin = context.plugin;

  var selection = context.selection;
  for (var i=0; i<selection.count(); i++) {
  	var layer = selection[i];
  	if ([layer isKindOfClass:[MSTextLayer class]]) {
      var lineFragments = getLineFragments(layer);
      var container = layer.parentGroup();
      addLineFragments(container, lineFragments);
    }
  }
};

var onAddBaselines = function(context) {
  var doc = context.document;
  var plugin = context.plugin;

  var selection = context.selection;
  for (var i=0; i<selection.count(); i++) {
  	var layer = selection[i];
  	if ([layer isKindOfClass:[MSTextLayer class]]) {
      var lineFragments = getLineFragments(layer);
      var container = layer.parentGroup();
      addBaselines(container, lineFragments);
    }
  }
};

var onRun = function(context) {
  var doc = context.document;
  var plugin = context.plugin;

  var selection = context.selection;
  for (var i=0; i<selection.count(); i++) {
  	var layer = selection[i];
  	if ([layer isKindOfClass:[MSTextLayer class]]) {
      var lineFragments = getLineFragmentsNative(layer);
      var container = layer.parentGroup();
      addBaselines(container, lineFragments);
      addLineFragments(container, lineFragments);
    }
  }
};
